// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String
  avatar          String?
  subscriptionTier SubscriptionTier @default(FREE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLogin       DateTime?
  
  players         Player[]
  clubs           Club[]
  tournaments     Tournament[]
  
  @@map("users")
}

model Player {
  id          String    @id @default(uuid())
  userId      String
  gomafiaId   String    @unique
  name        String
  eloRating   Int       @default(1200)
  totalGames  Int       @default(0)
  wins        Int       @default(0)
  losses      Int       @default(0)
  clubId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  club        Club?     @relation(fields: [clubId], references: [id])
  participations GameParticipation[]
  roleStats   PlayerRoleStats[]
  
  @@map("players")
}

model Club {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  logoUrl     String?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  creator     User      @relation(fields: [createdBy], references: [id])
  players     Player[]
  
  @@map("clubs")
}

model Game {
  id              String    @id @default(uuid())
  gomafiaId       String    @unique
  tournamentId    String?
  date            DateTime
  durationMinutes Int?
  winnerTeam      WinnerTeam?
  status          GameStatus @default(SCHEDULED)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  participations  GameParticipation[]
  
  @@map("games")
}

model GameParticipation {
  id               String    @id @default(uuid())
  playerId         String
  gameId           String
  role             PlayerRole
  team             Team
  isWinner         Boolean
  performanceScore Int?
  
  player           Player    @relation(fields: [playerId], references: [id])
  game             Game      @relation(fields: [gameId], references: [id])
  
  @@unique([playerId, gameId])
  @@map("game_participations")
}

model Tournament {
  id              String    @id @default(uuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime?
  status          TournamentStatus @default(SCHEDULED)
  maxParticipants Int?
  entryFee        Decimal?
  prizePool       Decimal?
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  creator         User      @relation(fields: [createdBy], references: [id])
  games           Game[]
  
  @@map("tournaments")
}

model PlayerRoleStats {
  id                  String    @id @default(uuid())
  playerId            String
  role                PlayerRole
  gamesPlayed         Int       @default(0)
  wins                Int       @default(0)
  losses              Int       @default(0)
  winRate             Decimal   @default(0)
  averagePerformance  Decimal   @default(0)
  lastPlayed          DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  player              Player    @relation(fields: [playerId], references: [id])
  
  @@unique([playerId, role])
  @@map("player_role_stats")
}

model Analytics {
  id          String    @id @default(uuid())
  entityType  EntityType
  entityId    String
  metricName  String
  metricValue Decimal
  metricPeriod MetricPeriod
  calculatedAt DateTime @default(now())
  validUntil  DateTime?
  
  @@map("analytics")
}

enum SubscriptionTier {
  FREE
  PREMIUM
  CLUB
  ENTERPRISE
}

enum PlayerRole {
  DON
  MAFIA
  SHERIFF
  CITIZEN
}

enum Team {
  BLACK
  RED
}

enum WinnerTeam {
  BLACK
  RED
  DRAW
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EntityType {
  PLAYER
  CLUB
  TOURNAMENT
}

enum MetricPeriod {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}
