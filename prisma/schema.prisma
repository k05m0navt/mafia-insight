// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String
  avatar          String?
  subscriptionTier SubscriptionTier @default(FREE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLogin       DateTime?
  
  players         Player[]
  clubs           Club[]
  tournaments     Tournament[]
  
  @@map("users")
}

model Player {
  id          String    @id @default(uuid())
  userId      String
  gomafiaId   String    @unique
  name        String
  eloRating   Int       @default(1200)
  totalGames  Int       @default(0)
  wins        Int       @default(0)
  losses      Int       @default(0)
  region      String?
  clubId      String?
  lastSyncAt  DateTime?
  syncStatus  EntitySyncStatus?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  club        Club?     @relation(fields: [clubId], references: [id], name: "ClubMembers")
  participations GameParticipation[]
  roleStats   PlayerRoleStats[]
  yearStats   PlayerYearStats[]
  tournaments PlayerTournament[]
  presidingClubs Club[]  @relation("ClubPresident")
  
  @@map("players")
}

model Club {
  id          String    @id @default(uuid())
  gomafiaId   String?   @unique
  name        String    @unique
  region      String?
  presidentId String?
  description String?
  logoUrl     String?
  createdBy   String
  lastSyncAt  DateTime?
  syncStatus  EntitySyncStatus?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  creator     User      @relation(fields: [createdBy], references: [id])
  president   Player?   @relation("ClubPresident", fields: [presidentId], references: [id])
  players     Player[]  @relation("ClubMembers")
  
  @@map("clubs")
}

model Game {
  id              String    @id @default(uuid())
  gomafiaId       String    @unique
  tournamentId    String?
  date            DateTime
  durationMinutes Int?
  winnerTeam      WinnerTeam?
  status          GameStatus @default(SCHEDULED)
  lastSyncAt      DateTime?
  syncStatus      EntitySyncStatus?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  participations  GameParticipation[]
  
  @@map("games")
}

model GameParticipation {
  id               String    @id @default(uuid())
  playerId         String
  gameId           String
  role             PlayerRole
  team             Team
  isWinner         Boolean
  performanceScore Int?
  
  player           Player    @relation(fields: [playerId], references: [id])
  game             Game      @relation(fields: [gameId], references: [id])
  
  @@unique([playerId, gameId])
  @@map("game_participations")
}

model Tournament {
  id              String    @id @default(uuid())
  gomafiaId       String?   @unique
  name            String
  description     String?
  stars           Int?
  averageElo      Decimal?
  isFsmRated      Boolean   @default(false)
  startDate       DateTime
  endDate         DateTime?
  status          TournamentStatus @default(SCHEDULED)
  maxParticipants Int?
  entryFee        Decimal?
  prizePool       Decimal?
  createdBy       String
  lastSyncAt      DateTime?
  syncStatus      EntitySyncStatus?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  creator         User      @relation(fields: [createdBy], references: [id])
  games           Game[]
  playerTournaments PlayerTournament[]
  
  @@map("tournaments")
}

model PlayerRoleStats {
  id                  String    @id @default(uuid())
  playerId            String
  role                PlayerRole
  gamesPlayed         Int       @default(0)
  wins                Int       @default(0)
  losses              Int       @default(0)
  winRate             Decimal   @default(0)
  averagePerformance  Decimal   @default(0)
  lastPlayed          DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  player              Player    @relation(fields: [playerId], references: [id])
  
  @@unique([playerId, role])
  @@map("player_role_stats")
}

model Analytics {
  id          String    @id @default(uuid())
  entityType  EntityType
  entityId    String
  metricName  String
  metricValue Decimal
  metricPeriod MetricPeriod
  calculatedAt DateTime @default(now())
  validUntil  DateTime?
  
  @@map("analytics")
}

model SyncLog {
  id                String    @id @default(uuid())
  type              SyncType
  status            SyncStatusEnum
  startTime         DateTime  @default(now())
  endTime           DateTime?
  recordsProcessed  Int?
  errors            Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("sync_logs")
}

model SyncStatus {
  id                     String    @id @default("current")
  lastSyncTime           DateTime?
  lastSyncType           String?
  isRunning              Boolean   @default(false)
  progress               Int?
  currentOperation       String?
  lastError              String?
  validationRate         Float?
  totalRecordsProcessed  Int?
  validRecords           Int?
  invalidRecords         Int?
  updatedAt              DateTime  @updatedAt
  
  @@map("sync_status")
}

model ImportCheckpoint {
  id               String   @id @default("current")
  currentPhase     String
  currentBatch     Int
  lastProcessedId  String?
  processedIds     String[]
  progress         Int
  lastUpdated      DateTime @updatedAt
  createdAt        DateTime @default(now())
  
  @@map("import_checkpoints")
}

model PlayerYearStats {
  id            String   @id @default(uuid())
  playerId      String
  year          Int
  totalGames    Int      @default(0)
  donGames      Int      @default(0)
  mafiaGames    Int      @default(0)
  sheriffGames  Int      @default(0)
  civilianGames Int      @default(0)
  eloRating     Decimal?
  extraPoints   Decimal  @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  player        Player   @relation(fields: [playerId], references: [id])
  
  @@unique([playerId, year])
  @@map("player_year_stats")
}

model PlayerTournament {
  id           String      @id @default(uuid())
  playerId     String
  tournamentId String
  placement    Int?
  ggPoints     Int?
  eloChange    Int?
  prizeMoney   Decimal?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  player       Player      @relation(fields: [playerId], references: [id])
  tournament   Tournament  @relation(fields: [tournamentId], references: [id])
  
  @@unique([playerId, tournamentId])
  @@map("player_tournaments")
}

enum SubscriptionTier {
  FREE
  PREMIUM
  CLUB
  ENTERPRISE
}

enum PlayerRole {
  DON
  MAFIA
  SHERIFF
  CITIZEN
}

enum Team {
  BLACK
  RED
}

enum WinnerTeam {
  BLACK
  RED
  DRAW
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EntityType {
  PLAYER
  CLUB
  TOURNAMENT
}

enum MetricPeriod {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

enum SyncType {
  FULL
  INCREMENTAL
}

enum SyncStatusEnum {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum EntitySyncStatus {
  SYNCED
  PENDING
  ERROR
}
