name: Test Coverage Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  test-coverage:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run type checking
        run: yarn type-check

      - name: Run linting
        run: yarn lint

      - name: Run unit and integration tests with coverage
        run: yarn test:coverage

      - name: Generate coverage dashboard
        run: node scripts/coverage-dashboard.js

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload coverage dashboard
        uses: actions/upload-artifact@v4
        with:
          name: coverage-dashboard-${{ matrix.node-version }}
          path: coverage-dashboard/
          retention-days: 30

      - name: Comment PR with coverage report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read coverage summary
            const coveragePath = './coverage/coverage-summary.json';
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              
              const comment = `## 📊 Test Coverage Report
              
              | Metric | Coverage | Status |
              |--------|----------|--------|
              | Lines | ${total.lines.pct}% | ${total.lines.pct >= 80 ? '✅' : '❌'} |
              | Functions | ${total.functions.pct}% | ${total.functions.pct >= 80 ? '✅' : '❌'} |
              | Branches | ${total.branches.pct}% | ${total.branches.pct >= 80 ? '✅' : '❌'} |
              | Statements | ${total.statements.pct}% | ${total.statements.pct >= 80 ? '✅' : '❌'} |
              
              **Overall Status:** ${total.lines.pct >= 80 ? '✅ PASS' : '❌ FAIL'}
              
              <details>
              <summary>View detailed coverage report</summary>
              
              Check the coverage dashboard artifact for detailed file-by-file coverage analysis.
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Fail if coverage is below threshold
        run: |
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            const thresholds = { lines: 80, functions: 80, branches: 80, statements: 80 };
            
            let failed = false;
            Object.entries(thresholds).forEach(([metric, threshold]) => {
              if (total[metric].pct < threshold) {
                console.error(\`❌ \${metric} coverage (\${total[metric].pct}%) is below threshold (\${threshold}%)\`);
                failed = true;
              }
            });
            
            if (failed) {
              console.error('❌ Coverage thresholds not met. Please improve test coverage.');
              process.exit(1);
            } else {
              console.log('✅ All coverage thresholds met!');
            }
          "

  coverage-trend:
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run coverage trend analysis
        run: |
          # Create coverage trend data
          mkdir -p coverage-trend
          echo "{\"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"coverage\": $(cat coverage/coverage-summary.json | jq '.total')}" > coverage-trend/trend.json

      - name: Upload coverage trend
        uses: actions/upload-artifact@v4
        with:
          name: coverage-trend
          path: coverage-trend/
          retention-days: 90
