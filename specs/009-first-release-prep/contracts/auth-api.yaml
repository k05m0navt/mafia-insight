openapi: 3.0.3
info:
  title: Mafia Insight - Authentication & Profile API
  version: 1.0.0
  description: |
    API endpoints for user authentication, profile management, and avatar handling.
    Part of Feature 009: First Production Release Preparation.

servers:
  - url: https://mafiainsight.com/api
    description: Production
  - url: http://localhost:3000/api
    description: Local development

tags:
  - name: Authentication
    description: User login, signup, and session management
  - name: Profile
    description: User profile viewing and editing
  - name: Avatar
    description: User avatar upload and management

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user with email and password, return session and success notification
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Welcome back, John Doe!'
                  user:
                    $ref: '#/components/schemas/User'
                  session:
                    $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/signup:
    post:
      tags: [Authentication]
      summary: User registration
      description: Create new user account with name, email, and password
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 255
                  example: 'John Doe'
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Account created successfully!'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: User logout
      description: End user session and clear authentication
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Logged out successfully'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /profile:
    get:
      tags: [Profile]
      summary: Get current user profile
      description: Retrieve authenticated user's profile information
      operationId: getProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

    patch:
      tags: [Profile]
      summary: Update user profile
      description: Update authenticated user's profile information (name, theme preference)
      operationId: updateProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 255
                  example: 'John Smith'
                themePreference:
                  type: string
                  enum: [light, dark, system]
                  example: 'dark'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Profile updated successfully'
                  profile:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /profile/avatar:
    post:
      tags: [Avatar]
      summary: Upload user avatar
      description: Upload avatar image to Supabase Storage and update user profile
      operationId: uploadAvatar
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file (JPEG, PNG, WebP, GIF) max 2MB
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Avatar uploaded successfully'
                  avatarUrl:
                    type: string
                    format: uri
                    example: 'https://xxx.supabase.co/storage/v1/object/public/avatars/user-123.jpg'
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Avatar]
      summary: Delete user avatar
      description: Remove avatar from Supabase Storage and clear profile avatar URL
      operationId: deleteAvatar
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Avatar deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Avatar deleted successfully'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        avatar:
          type: string
          format: uri
          nullable: true
        role:
          type: string
          enum: [guest, user, moderator, admin]
        subscriptionTier:
          type: string
          enum: [FREE, PREMIUM, CLUB, ENTERPRISE]
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - name
        - role
        - subscriptionTier

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            themePreference:
              type: string
              enum: [light, dark, system]
            lastLogin:
              type: string
              format: date-time
              nullable: true

    Session:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresAt:
          type: string
          format: date-time
      required:
        - accessToken
        - expiresAt

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
      required:
        - error
        - message

  responses:
    Unauthorized:
      description: Unauthorized - missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: 'Unauthorized'
            message: 'You must be logged in to access this resource'
            code: 'AUTH_REQUIRED'

    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: 'Bad Request'
            message: 'Invalid input data'
            code: 'VALIDATION_ERROR'

    TooManyRequests:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: 'Too Many Requests'
            message: 'Rate limit exceeded. Please try again later.'
            code: 'RATE_LIMIT_EXCEEDED'
