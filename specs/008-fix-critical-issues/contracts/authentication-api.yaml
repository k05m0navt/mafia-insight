openapi: 3.0.3
info:
  title: Authentication API
  description: API for user authentication, session management, and access control
  version: 1.0.0
  contact:
    name: Mafia Insight Development Team

servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://staging.example.com/api
    description: Staging environment server
  - url: https://production.example.com/api
    description: Production server

paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: User logout
      description: Logout user and invalidate session
      operationId: logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      summary: User registration
      description: Register a new user account
      operationId: register
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/password-reset:
    post:
      summary: Request password reset
      description: Send password reset email to user
      operationId: requestPasswordReset
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid email address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/password-reset/confirm:
    post:
      summary: Confirm password reset
      description: Reset password with token
      operationId: confirmPasswordReset
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Password reset token
                newPassword:
                  type: string
                  minLength: 6
                  description: New password
              required:
                - token
                - newPassword
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid token or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      summary: Get current user
      description: Get current authenticated user information
      operationId: getCurrentUser
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user profile
      description: Update current user profile information
      operationId: updateProfile
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify:
    get:
      summary: Verify authentication
      description: Verify if user is authenticated and token is valid
      operationId: verifyAuth
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authentication verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
                  expiresAt:
                    type: string
                    format: date-time
        '401':
          description: Not authenticated or token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          minLength: 6
          description: User password
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT authentication token
        expiresAt:
          type: string
          format: date-time
          description: Token expiration time

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          minLength: 6
          description: User password
        name:
          type: string
          minLength: 2
          description: User full name
        role:
          type: string
          enum: [user, moderator]
          default: user
          description: User role
      required:
        - email
        - password
        - name

    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          description: User full name
        email:
          type: string
          format: email
          description: User email address

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User full name
        role:
          type: string
          enum: [admin, user, moderator]
          description: User role
        isActive:
          type: boolean
          description: Whether user account is active
        lastLogin:
          type: string
          format: date-time
          description: Last login timestamp
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ValidationError:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          properties:
            field:
              type: string
              description: Field that failed validation
            message:
              type: string
              description: Validation error message
            value:
              type: string
              description: Invalid value provided

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: When the error occurred

tags:
  - name: Authentication
    description: User authentication and session management
  - name: User Management
    description: User profile and account management
