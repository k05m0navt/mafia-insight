openapi: 3.0.3
info:
  title: Authentication API
  description: API for enhanced authentication UX and user management
  version: 1.0.0
  contact:
    name: Mafia Insight Team
    email: support@mafia-insight.com

servers:
  - url: https://api.mafia-insight.com
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: securepassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  session:
                    $ref: '#/components/schemas/Session'
                  message:
                    type: string
                    example: 'Login successful'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/logout:
    post:
      summary: User logout
      description: Logout current user and invalidate session
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout successful'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /auth/refresh:
    post:
      summary: Refresh session
      description: Refresh authentication token
      tags:
        - Authentication
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    $ref: '#/components/schemas/Session'
                  message:
                    type: string
                    example: 'Token refreshed successfully'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /auth/error:
    get:
      summary: Get authentication error
      description: Retrieve user-friendly error message for authentication failure
      tags:
        - Authentication
      security: []
      parameters:
        - name: error_code
          in: query
          required: true
          schema:
            type: string
          description: Technical error code from Supabase
        - name: action
          in: query
          required: true
          schema:
            type: string
          description: Authentication action that failed
      responses:
        '200':
          description: Error message retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '400':
          description: Invalid error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/status:
    get:
      summary: Get authentication status
      description: Check current user authentication status
      tags:
        - Authentication
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAuthenticated:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
                  role:
                    $ref: '#/components/schemas/UserRole'
                  permissions:
                    type: array
                    items:
                      type: string
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /users:
    get:
      summary: List users
      description: Get list of users (admin only)
      tags:
        - User Management
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Items per page
        - name: role
          in: query
          schema:
            $ref: '#/components/schemas/UserRole'
          description: Filter by role
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

    post:
      summary: Create user
      description: Create new user account (admin only)
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: newuser@example.com
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: 'John Doe'
                role:
                  $ref: '#/components/schemas/UserRole'
                avatar:
                  type: string
                  format: uri
                  example: 'https://example.com/avatar.jpg'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  invitation:
                    $ref: '#/components/schemas/UserInvitation'
                  message:
                    type: string
                    example: 'User created and invitation sent'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /users/{userId}:
    get:
      summary: Get user
      description: Get user details by ID
      tags:
        - User Management
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

    put:
      summary: Update user
      description: Update user details (admin only)
      tags:
        - User Management
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                role:
                  $ref: '#/components/schemas/UserRole'
                avatar:
                  type: string
                  format: uri
                isActive:
                  type: boolean
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: 'User updated successfully'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/invitations:
    get:
      summary: List user invitations
      description: Get list of pending user invitations (admin only)
      tags:
        - User Management
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, expired, accepted]
          description: Filter by invitation status
      responses:
        '200':
          description: Invitations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  invitations:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserInvitation'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /users/invitations/{invitationId}/resend:
    post:
      summary: Resend invitation
      description: Resend user invitation email (admin only)
      tags:
        - User Management
      parameters:
        - name: invitationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Invitation resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invitation resent successfully'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        email:
          type: string
          format: email
          example: 'user@example.com'
        name:
          type: string
          example: 'John Doe'
        role:
          $ref: '#/components/schemas/UserRole'
        avatar:
          type: string
          format: uri
          nullable: true
          example: 'https://example.com/avatar.jpg'
        isActive:
          type: boolean
          example: true
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          example: '2025-01-26T10:30:00Z'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-26T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-26T10:30:00Z'

    UserRole:
      type: string
      enum: [GUEST, USER, ADMIN]
      example: 'USER'

    Session:
      type: object
      properties:
        accessToken:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        refreshToken:
          type: string
          example: 'refresh_token_string'
        expiresAt:
          type: string
          format: date-time
          example: '2025-01-26T11:30:00Z'

    UserInvitation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        email:
          type: string
          format: email
          example: 'newuser@example.com'
        role:
          $ref: '#/components/schemas/UserRole'
        invitedBy:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        expiresAt:
          type: string
          format: date-time
          example: '2025-02-02T10:00:00Z'
        acceptedAt:
          type: string
          format: date-time
          nullable: true
          example: '2025-01-26T10:30:00Z'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-26T10:00:00Z'

    AuthenticationError:
      type: object
      properties:
        errorCode:
          type: string
          example: 'invalid_credentials'
        userMessage:
          type: string
          example: 'Invalid email or password. Please check your credentials and try again.'
        action:
          type: string
          example: 'login'
        context:
          type: object
          nullable: true
          example: { 'field': 'email' }
        resolved:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2025-01-26T10:30:00Z'

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: 'Validation failed'
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: 'email'
              message:
                type: string
                example: 'Invalid email format'

    Error:
      type: object
      properties:
        message:
          type: string
          example: 'Resource not found'
        code:
          type: string
          example: 'NOT_FOUND'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
