openapi: 3.0.3
info:
  title: Authentication API
  description: API endpoints for authentication, user management, and permissions
  version: 1.0.0
  contact:
    name: Mafia Insight Team
    email: dev@mafiainsight.com

servers:
  - url: /api/auth
    description: Authentication API endpoints

paths:
  /login:
    post:
      summary: User login
      description: Authenticate user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: 'user@example.com'
                password:
                  type: string
                  minLength: 8
                  example: 'password123'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /signup:
    post:
      summary: User registration
      description: Create new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - confirmPassword
              properties:
                email:
                  type: string
                  format: email
                  example: 'user@example.com'
                password:
                  type: string
                  minLength: 8
                  example: 'password123'
                confirmPassword:
                  type: string
                  example: 'password123'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /logout:
    post:
      summary: User logout
      description: Logout current user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logged out successfully'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /me:
    get:
      summary: Get current user
      description: Get current authenticated user information
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /permissions:
    get:
      summary: Get user permissions
      description: Get permissions for current user
      tags:
        - Permissions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/permissions:
    get:
      summary: Get all permissions (Admin only)
      description: Get all permissions for admin management
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

    put:
      summary: Update permissions (Admin only)
      description: Update page permissions for user roles
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: array
                  items:
                    $ref: '#/components/schemas/PermissionUpdate'
      responses:
        '200':
          description: Permissions updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Permissions updated successfully'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '422':
          description: Validation error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 'user_123'
        email:
          type: string
          format: email
          example: 'user@example.com'
        role:
          type: string
          enum: [admin, user, guest]
          example: 'user'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Permission:
      type: object
      properties:
        id:
          type: string
          example: 'perm_123'
        resource:
          type: string
          example: 'players'
        action:
          type: string
          enum: [read, write, admin]
          example: 'read'
        roles:
          type: array
          items:
            type: string
          example: ['user', 'admin']

    PermissionUpdate:
      type: object
      required:
        - id
        - roles
      properties:
        id:
          type: string
          example: 'perm_123'
        roles:
          type: array
          items:
            type: string
          example: ['user', 'admin']

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Invalid credentials'
        message:
          type: string
          example: 'The email or password you entered is incorrect'
        code:
          type: string
          example: 'INVALID_CREDENTIALS'

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: 'Validation failed'
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: 'email'
              message:
                type: string
                example: 'Email is required'
